name: Build Citron (Nightly)
concurrency:
  group: build-nightly-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: {}

jobs:
  build:
    name: "${{ matrix.name }} (${{ matrix.arch }})"
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            optimized: false
            name: "Citron build (Normal)"
            arch: x86_64
          - runs-on: ubuntu-latest
            optimized: true
            name: "Citron Build (Optimized)"
            arch: x86_64
          # TODO: Debug ARM builds (fails with intel-vulkan dep for arch on arm
          # - runs-on: ubuntu-24.04-arm
          #   name: "Citron Build (Normal)"
          #   optimized: false
          #   arch: aarch64
    container: ghcr.io/pkgforge-dev/archlinux:latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install dependencies
        if: always()
        run: |
          sed -i 's/DownloadUser/#DownloadUser/g' /etc/pacman.conf
          pacman -Syu --noconfirm \
            aom \
            base-devel \
            boost \
            boost-libs \
            catch2 \
            clang \
            cmake \
            curl \
            dav1d \
            desktop-file-utils \
            doxygen \
            enet \
            ffmpeg \
            ffmpeg4.4 \
            fmt \
            gamemode \
            gcc13 \
            git \
            glslang \
            glu \
            haskell-gnutls \
            hidapi \
            libass \
            libdecor \
            libfdk-aac \
            libopusenc \
            libva \
            libvpx \
            libxi \
            libxkbcommon-x11 \
            libxss \
            libzip \
            mbedtls \
            mbedtls2 \
            mesa \
            meson \
            nasm \
            ninja \
            nlohmann-json \
            numactl \
            patchelf \
            pipewire-audio \
            pulseaudio \
            pulseaudio-alsa \
            python-pip \
            qt6-base \
            qt6ct \
            qt6-multimedia \
            qt6-tools \
            qt6-wayland \
            sdl2 \
            strace \
            svt-av1 \
            unzip \
            vulkan-headers \
            vulkan-nouveau \
            vulkan-radeon \
            wget \
            x264 \
            x265 \
            xcb-util-image \
            xcb-util-renderutil \
            xcb-util-wm \
            xorg-server-xvfb \
            zip \
            zsync

            if [ "$(uname -m)" = 'x86_64' ]; then
              pacman -Syu --noconfirm vulkan-intel
            fi

      - name: Install debloated llvm-libs
        run: |
          LLVM_URL="https://github.com/pkgforge-dev/llvm-libs-debloated/releases/download/continuous/llvm-libs-nano-x86_64.pkg.tar.zst"
          wget --retry-connrefused --tries=30 "$LLVM_URL" -O ./llvm-libs.pkg.tar.zst
          pacman -U --noconfirm ./llvm-libs.pkg.tar.zst
          rm -f ./llvm-libs.pkg.tar.zst

      - name: Install iculess libxml2 and qt6-core
        run: |
          QT6_URL="https://github.com/pkgforge-dev/llvm-libs-debloated/releases/download/continuous/qt6-base-iculess-x86_64.pkg.tar.zst"
          LIBXML_URL="https://github.com/pkgforge-dev/llvm-libs-debloated/releases/download/continuous/libxml2-iculess-x86_64.pkg.tar.zst"
          wget --retry-connrefused --tries=30 "$QT6_URL" -O ./qt6-base-iculess.pkg.tar.zst
          wget --retry-connrefused --tries=30 "$LIBXML_URL" -O ./libxml2-iculess.pkg.tar.zst
          pacman -U --noconfirm ./qt6-base-iculess.pkg.tar.zst ./libxml2-iculess.pkg.tar.zst
          rm -f ./qt6-base-iculess.pkg.tar.zst ./libxml2-iculess.pkg.tar.zst

      - name: Install ffmpeg mini
        run: |
          FFMPEG_URL="https://github.com/pkgforge-dev/llvm-libs-debloated/releases/download/continuous/ffmpeg-mini-x86_64.pkg.tar.zst"
          wget --retry-connrefused --tries=30 "$FFMPEG_URL" -O ./ffmpeg-mini-x86_64.pkg.tar.zst
          pacman -U --noconfirm ./ffmpeg-mini-x86_64.pkg.tar.zst
          rm -f ./ffmpeg-mini-x86_64.pkg.tar.zst

      - name: Compile Citron (Normal)
        if: ${{ matrix.optimized == false }}
        run: |
          chmod +x ./citron-appimage.sh && DEVEL=true ./citron-appimage.sh
          mkdir -p dist
          mv *.AppImage* dist/

      - name: Compile Citron (Optimized)
        if: ${{ matrix.optimized == true }}
        run: |
          rm -rf ./AppDir || true
          sudo pacman -R --noconfirm citron || true
          chmod +x ./citron-appimage.sh && DEVEL=true ./citron-appimage.sh v3
          mkdir -p dist
          mv *.AppImage* dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: citron-${{ matrix.optimized && 'optimized' || 'normal' }}-appimage-${{ matrix.arch }}
          path: "dist"

      - name: Check version file
        if: ${{ matrix.optimized == false }}
        run: |
          cat ~/version
          echo "APP_VERSION=$(cat ~/version)" >> "${GITHUB_ENV}"

      - name: Upload version file
        if: ${{ matrix.optimized == false }}
        uses: actions/upload-artifact@v4.6.1
        with:
          name: version
          path: ~/version

  release:
    name: "release"
    needs: [build]
    permissions:
      actions: read
      security-events: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.9
        with:
          name: citron-optimized-appimage-x86_64

      - uses: actions/download-artifact@v4.1.9
        with:
          name: citron-normal-appimage-x86_64

      # - uses: actions/download-artifact@v4.1.9
      #   with:
      #     name: citron-normal-appimage-aarch64

      - uses: actions/download-artifact@v4.1.9
        with:
          name: version

      - name: Read version
        run: |
          export VERSION="$(cat version)"
          echo "APP_VERSION=${VERSION}" >> "${GITHUB_ENV}"

      - name: Del Previous Release
        run: |
          gh release delete "nightly" --repo "${GITHUB_REPOSITORY}" --cleanup-tag  -y
          sleep 5
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        continue-on-error: true

      - uses: softprops/action-gh-release@v2
        with:
          name: "Continuous Build (Nightly Version: ${{ env.APP_VERSION }})"
          tag_name: "nightly"
          prerelease: true
          draft: false
          generate_release_notes: false
          make_latest: false
          files: |
            *.AppImage*
